11.1 Introduction
11.1.1 AOP concepts
        Aspect
        Join point
        Advice
        Pointcut
        Introduction
        Target object
        AOP proxy
        Weaving

        Before advice
        After returning advice
        After throwing advice
        After (finally) advice
        Around advice: Advice 
11.1.2 Spring AOP capabilities and goals
11.1.3 AOP Proxies

11.2 @AspectJ support
11.2.1 Enabling @AspectJ Support
11.2.2 Declaring an aspect
11.2.3 Declaring a pointcut
11.2.4 Declaring advice
11.2.5 Introductions [DeclareParents mixin]
11.2.6 Aspect instantiation models
11.2.7 Example

11.3 Schema-based AOP support
11.3.1 Declaring an aspect
11.3.2 Declaring a pointcut
11.3.3 Declaring advice
11.3.4 Introductions
11.3.5 Aspect instantiation models
11.3.6 Advisors
11.3.7 Example

11.4 Choosing which AOP declaration style to use
11.4.1 Spring AOP or full AspectJ?
11.4.2 @AspectJ or XML for Spring AOP?

11.5 Mixing aspect types

11.6 Proxying mechanisms
11.6.1 Understanding AOP proxies

11.7 Programmatic creation of @AspectJ Proxies

11.8 Using AspectJ with Spring applications
11.8.1 Using AspectJ to dependency inject domain objects with Spring
11.8.2 Other Spring aspects for AspectJ
11.8.3 Configuring AspectJ aspects using Spring IoC
11.8.4 Load-time weaving with AspectJ in the Spring Framework [LoadTimeWeaver]

11.9 Further Resources