--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
一、创建 mysql docker 一主两从

1. 创建存储mysql数据库的目录

mkdir -p ~/mysql/data      ~/mysql/logs      ~/mysql/conf
mkdir -p ~/mysql/data-sla1 ~/mysql/logs-sla1 ~/mysql/conf-sla1
mkdir -p ~/mysql/data-sla2 ~/mysql/logs-sla2 ~/mysql/conf-sla2

2. 拉取镜像

docker search mysql

docker pull mysql:5.6 以5.6版本为例

3. 启动docker

docker run -p 3306:3306 --name mymysql      -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6
docker run -p 3307:3306 --name mymysql-sla1 -v $PWD/conf-sla1:/etc/mysql/conf.d -v $PWD/logs-sla1:/logs -v $PWD/data-sla1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6
docker run -p 3308:3306 --name mymysql-sla2 -v $PWD/conf-sla2:/etc/mysql/conf.d -v $PWD/logs-sla2:/logs -v $PWD/data-sla2:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6


-p 3306:3306                    将容器的 3306 端口映射到主机的 3306 端口
-v $PWD/conf:/etc/mysql/conf.d  将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf
-v $PWD/logs:/logs              将主机当前目录下的 logs 目录挂载到容器的 /logs
-v $PWD/data:/var/lib/mysql     将主机当前目录下的data目录挂载到容器的 /var/lib/mysql
-e MYSQL_ROOT_PASSWORD=123456   初始化 root 用户的密码


4. 查看docker启动状况

docker ps

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

二、设置主从数据库

1. 设置数据库配置文件

主
[mysqld]
server_id=100           ## 设置server_id，一般设置为IP，同一局域网内注意要唯一
binlog-ignore-db=mysql  ## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）
log-bin=edu-mysql-bin   ## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）
binlog_cache_size=1M    ## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存
binlog_format=mixed     ## 主从复制的格式（mixed,statement,row，默认格式是statement）
expire_logs_days=7      ## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。
slave_skip_errors=1062  ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。 ## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致

从
[mysqld]
server_id=101                   ## 设置server_id，一般设置为IP,注意要唯一
binlog-ignore-db=mysql          ## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）
log-bin=edu-mysql-slave1-bin    ## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用
binlog_cache_size=1M            ## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存
binlog_format=mixed             ## 主从复制的格式（mixed,statement,row，默认格式是statement）
expire_logs_days=7              ## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。
slave_skip_errors=1062          ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
relay_log=edu-mysql-relay-bin   ## relay_log配置中继日志
log_slave_updates=1             ## log_slave_updates表示slave将复制事件写进自己的二进制日志
read_only=1                     ## 防止改变数据(除了特殊的线程)


2. 查询docker 本机地址

docker inspect --format='{{.NetworkSettings.IPAddress}}' 7816696ea80b
172.17.0.2


3. 进入 Master

docker exec -it c66b935ea94d /bin/bash

4. 查看mysql 启动状态

service mysql status

5. 添加slave账户

mysql -u root -p

CREATE USER 'slave'@'%' IDENTIFIED BY '123456';

GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';



6. 查看Master状态

show master status;

记录下 File 和 Position 字段的值



7. 到slave中进入 mysql 连接 master

change master to master_host='172.17.0.2', master_user='slave', master_password='123456', master_port=3306, master_log_file='edu-mysql-bin.000002', master_log_pos=1493, master_connect_retry=30;

master_host             Master 的IP地址
master_user             在 Master 中授权的用于数据同步的用户
master_password         同步数据的用户的密码
master_port             Master的数据库的端口号
master_log_file         指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值
master_log_pos          从哪个 Position 开始读，即上文中提到的 Position 字段的值
master_connect_retry    当重新建立主从连接时，如果连接失败，重试的时间间隔，单位是秒，默认是60秒

show slave status \G;


start slave;